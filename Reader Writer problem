/*
1. Make main func and  initialize semaphores then create and join threads.
2. Make writer and reader func.
*/
#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>

sem_t r, w;
int r_count = 0;

void *writer()
{
	sem_wait(&w);
		printf("\nWrite function occurs");
	sem_post(&w);
}

void *reader()
{
	sem_wait(&r);
		r_count++;
		if(r_count == 1)
		{
			sem_wait(&w);//If it's the first reader (r_count == 1), the reader acquires the w semaphore, preventing writers from accessing the resource.
		}
	sem_post(&r);
	
	printf("\nRead function occurs");
	
	sem_wait(&r);
		r_count--;
		if(r_count == 0)
		{
			sem_post(&w);//Decrement r_count and if it becomes 0, the reader releases the w semaphore, allowing writers to access the resource.
		}
	sem_post(&r);
}

int main()
{
	pthread_t rtid[5], wtid[5];
	
	sem_init(&r, 0, 1);
	sem_init(&w, 0, 1);
	
	for(int i = 0; i < 5; i++)
	{
		pthread_create(&wtid[i], NULL, writer, NULL);
		pthread_create(&rtid[i], NULL, reader, NULL);
	}
	for(int i = 0; i < 5; i++)
	{
		pthread_join(wtid[i], NULL);
		pthread_join(rtid[i], NULL);	
	}
	
	return 0;
}
/*OUTPUT
ubuntu@omkar:~$ gcc os_pr5.c
ubuntu@omkar:~$ ./a.out 

Write function occurs
Write function occurs
Write function occurs
Read function occurs
Read function occurs
Write function occurs
Read function occurs
Write function occurs
Read function occurs
Read function occurs
*/
