/*
1. Make main func and  initialize semaphores then create and join threads.
2. Make producer and consumer func.
*/

#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>

sem_t e, f, s;
int in, out = 0;
int buff[5];

void *producer(void *arg)
{
	int data = *(int*) arg;//[void >> pointer >> int]
	sem_wait(&e);
		sem_wait(&s);
		
		buff[in] = data;
		printf("\nProducer (%d) put value in Buffer (%d)", data, in);
		in = (in + 1) % 5;
		
		sem_post(&s);
	sem_post(&f);
}

void *consumer(void *arg)
{
	int val, data;
	do
	{
		sem_wait(&f);
			sem_wait(&s);
			
			data = buff[out];
			printf("\nData at (%d) got consumed", out);
			out = (out + 1) % 5;
			
			sem_post(&s);
		sem_post(&e);
		sem_getvalue(&e, &val);
	}
	while(val != 5);
}

void main()
{
	pthread_t ptid[8], ctid;
	sem_init(&e, 0, 5);
	sem_init(&f, 0, 0);
	sem_init(&s, 0, 1);
	pthread_create(&ctid, NULL, consumer, NULL);
	
	for(int i = 0; i < 8; i++)
	{
		pthread_create(&ptid[i], NULL, producer, (void*)&i);
	}
	pthread_join(ctid, NULL);
	for(int i = 0; i < 8; i++)
	{
		pthread_join(ptid[i], NULL);
	}
}

/*OUTPUT:
ubuntu@omkar:~$ gcc os_pr4.c
ubuntu@omkar:~$ ./a.out 

Producer (1) put value in Buffer (0)
Data at (0) got consumed
Producer (3) put value in Buffer (1)
Producer (4) put value in Buffer (2)
Data at (1) got consumed
Data at (2) got consumed
Producer (6) put value in Buffer (3)
Producer (6) put value in Buffer (4)
Data at (3) got consumed
Data at (4) got consumed
Producer (7) put value in Buffer (0)
Data at (0) got consumed
Producer (8) put value in Buffer (1)
Producer (8) put value in Buffer (2)u
*/
